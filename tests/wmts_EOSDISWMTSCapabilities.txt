
Imports

    >>> from owslib.wmts import WebMapTileService
    
Fake a request to a WMTS Server using saved doc from 
http://map1b.vis.earthdata.nasa.gov/wmts-geo/wmts.cgi

    >>> xml = open('eosdis-wmts-cap.xml', 'r').read() 
    >>> wmts = WebMapTileService('url', version='1.0.0', xml=xml)
    
Test capabilities
-----------------
    >>> wmts.identification.type
    'OGC WMTS'
    >>> wmts.identification.version
    '1.0.0'
    >>> wmts.identification.title
    'NASA Global Image Browse Services for EOSDIS'
    >>> str.strip(wmts.identification.abstract)
    'Near real time imagery from multiple NASA instruments'
    >>> wmts.identification.keywords
    ['World', 'Global']
    >>> wmts.identification.accessconstraints
    'none'
    >>> wmts.identification.fees
    'none'

Service Provider:

    >>> wmts.provider.name
    'National Aeronautics and Space Administration'

    >>> wmts.provider.url
    'http://earthdata.nasa.gov/'
    
Check contact info
    >>> wmts.provider.contact.name
    'Jeff Schmaltz'
    >>> wmts.provider.contact.position
    'Principal Support Scientist'

    # TODO: check if address can be duplicated
    >>> wmts.provider.contact.address
    'Goddard Space Flight Center'
    >>> wmts.provider.contact.region
    'Maryland'
    >>> wmts.provider.contact.email
    'support@earthdata.nasa.gov'
    >>> wmts.provider.contact.city
    'Greenbelt'
    >>> wmts.provider.contact.postcode
    '20771'
    >>> wmts.provider.contact.country
    'United States of America'
    
Test available content layers

    >>> list(wmts.contents)
    ['MODIS_Aqua_SurfaceReflectance_Bands121', 'MODIS_Aqua_Cloud_Top_Temp_Night', 'MODIS_Aqua_Sea_Ice', 'MODIS_Aqua_SurfaceReflectance_Bands721', 'MODIS_Terra_SurfaceReflectance_Bands143', 'MODIS_Aqua_Snow_Cover', 'MODIS_Terra_CorrectedReflectance_Bands721', 'MODIS_Terra_Cloud_Top_Pressure_Day', 'AIRS_Dust_Score', 'MODIS_Aqua_Cloud_Top_Pressure_Night', 'MODIS_Aqua_Brightness_Temp_Band31_Day', 'MODIS_Land_Water_Mask', 'OMI_Aerosol_Index', 'MODIS_Aqua_Land_Surface_Temp_Day', 'MODIS_Aqua_Aerosol', 'OMI_Absorbing_Aerosol_Optical_Depth', 'MODIS_Terra_Cloud_Top_Pressure_Night', 'AIRS_Prata_SO2_Index_Day', 'MODIS_Terra_Sea_Ice', 'OMI_Cloud_Pressure', 'MODIS_Aqua_CorrectedReflectance_TrueColor', 'MODIS_Terra_Water_Vapor_5km_Day', 'OMI_Aerosol_Optical_Depth', 'MODIS_Aqua_Water_Vapor_5km_Day', 'MODIS_Terra_SurfaceReflectance_Bands121', 'MODIS_Terra_CorrectedReflectance_Bands367', 'OMI_SO2_Planetary_Boundary_Layer', 'AIRS_CO_Total_Column_Night', 'MODIS_Aqua_Cloud_Top_Pressure_Day', 'AIRS_Precipitation_Day', 'MODIS_Terra_Data_No_Data', 'MODIS_Terra_Brightness_Temp_Band31_Day', 'AIRS_Precipitation_Night', 'MODIS_Terra_Land_Surface_Temp_Day', 'MODIS_Terra_Cloud_Top_Temp_Night', 'MODIS_Terra_Aerosol', 'MODIS_Terra_Brightness_Temp_Band31_Night', 'MODIS_Aqua_Brightness_Temp_Band31_Night', 'AIRS_CO_Total_Column_Day', 'MODIS_Terra_SurfaceReflectance_Bands721', 'MODIS_Terra_Cloud_Top_Temp_Day', 'MODIS_Terra_CorrectedReflectance_TrueColor', 'MODIS_Terra_Land_Surface_Temp_Night', 'MODIS_Aqua_Cloud_Top_Temp_Day', 'OMI_SO2_Middle_Troposphere', 'MODIS_Terra_Water_Vapor_5km_Night', 'OMI_SO2_Lower_Troposphere', 'AIRS_Prata_SO2_Index_Night', 'MODIS_Aqua_Land_Surface_Temp_Night', 'MODIS_Aqua_SurfaceReflectance_Bands143', 'MODIS_Terra_Snow_Cover', 'MODIS_Aqua_CorrectedReflectance_Bands721', 'MODIS_Aqua_Data_No_Data', 'OMI_SO2_Upper_Troposphere_and_Stratosphere', 'MODIS_Aqua_Water_Vapor_5km_Night']

Test TileMatrixSet variants
    # TODO: check individual values
    >>> wmts.tilematrixsets.keys()
    ['EPSG4326_2km', 'EPSG4326_500m', 'EPSG4326_250m', 'EPSG4326_1km']
    >>> wmts.tilematrixsets['EPSG4326_2km'].identifier
    'EPSG4326_2km'
    >>> wmts.tilematrixsets['EPSG4326_2km'].crs
    'urn:ogc:def:crs:OGC:1.3:CRS84'
    >>> sorted(wmts.tilematrixsets['EPSG4326_2km'].tilematrix.keys())
    ['0', '1', '2', '3', '4', '5']
    >>> wmts.tilematrixsets['EPSG4326_2km'].tilematrix['0'].identifier
    '0'
    >>> wmts.tilematrixsets['EPSG4326_2km'].tilematrix['0'].scaledenominator
    223382916.91738197
    >>> wmts.tilematrixsets['EPSG4326_2km'].tilematrix['0'].topleftcorner
    (-180.0, 90.0)
    >>> wmts.tilematrixsets['EPSG4326_2km'].tilematrix['0'].tilewidth
    512
    >>> wmts.tilematrixsets['EPSG4326_2km'].tilematrix['0'].tileheight
    512
    >>> wmts.tilematrixsets['EPSG4326_2km'].tilematrix['0'].matrixwidth
    2
    >>> wmts.tilematrixsets['EPSG4326_2km'].tilematrix['0'].matrixheight
    1
    >>> wmts.tilematrixsets['EPSG4326_2km'].tilematrix['5'].identifier
    '5'
    >>> wmts.tilematrixsets['EPSG4326_2km'].tilematrix['5'].scaledenominator
    6980716.153668187
    >>> wmts.tilematrixsets['EPSG4326_2km'].tilematrix['5'].topleftcorner
    (-180.0, 90.0)
    >>> wmts.tilematrixsets['EPSG4326_2km'].tilematrix['5'].tilewidth
    512
    >>> wmts.tilematrixsets['EPSG4326_2km'].tilematrix['5'].tileheight
    512
    >>> wmts.tilematrixsets['EPSG4326_2km'].tilematrix['5'].matrixwidth
    40
    >>> wmts.tilematrixsets['EPSG4326_2km'].tilematrix['5'].matrixheight
    20
    >>> wmts.tilematrixsets['EPSG4326_250m'].identifier
    'EPSG4326_250m'
    >>> wmts.tilematrixsets['EPSG4326_250m'].crs
    'urn:ogc:def:crs:OGC:1.3:CRS84'
    >>> sorted(wmts.tilematrixsets['EPSG4326_250m'].tilematrix.keys())
    ['0', '1', '2', '3', '4', '5', '6', '7', '8']
    >>> wmts.tilematrixsets['EPSG4326_250m'].tilematrix['0'].identifier
    '0'
    >>> wmts.tilematrixsets['EPSG4326_250m'].tilematrix['0'].topleftcorner
    (-180.0, 90.0)
    >>> wmts.tilematrixsets['EPSG4326_250m'].tilematrix['0'].tilewidth
    512
    >>> wmts.tilematrixsets['EPSG4326_250m'].tilematrix['0'].tileheight
    512
    >>> wmts.tilematrixsets['EPSG4326_250m'].tilematrix['0'].matrixwidth
    2
    >>> wmts.tilematrixsets['EPSG4326_250m'].tilematrix['0'].matrixheight
    1
    >>> wmts.tilematrixsets['EPSG4326_250m'].tilematrix['8'].identifier
    '8'
    >>> wmts.tilematrixsets['EPSG4326_250m'].tilematrix['8'].scaledenominator
    872589.5192085233
    >>> wmts.tilematrixsets['EPSG4326_250m'].tilematrix['8'].topleftcorner
    (-180.0, 90.0)
    >>> wmts.tilematrixsets['EPSG4326_250m'].tilematrix['8'].tilewidth
    512
    >>> wmts.tilematrixsets['EPSG4326_250m'].tilematrix['8'].tileheight
    512
    >>> wmts.tilematrixsets['EPSG4326_250m'].tilematrix['8'].matrixwidth
    320
    >>> wmts.tilematrixsets['EPSG4326_250m'].tilematrix['8'].matrixheight
    160

Test single item accessor

    >>> wmts['MODIS_Aqua_SurfaceReflectance_Bands121'].title
    'MODIS_Aqua_SurfaceReflectance_Bands121'

    # check something in the middle
    >>> wmts['MODIS_Aqua_Cloud_Top_Temp_Night'].title
    'MODIS_Aqua_Cloud_Top_Temp_Night'
    >>> wmts['MODIS_Aqua_Cloud_Top_Temp_Night'].boundingBoxWGS84
    (-180.0, -90.0, 180.0, 90.0)
    >>> wmts['MODIS_Aqua_Cloud_Top_Temp_Night'].id
    'MODIS_Aqua_Cloud_Top_Temp_Night'
    >>> wmts['MODIS_Aqua_Cloud_Top_Temp_Night'].styles
    {'default': {'isDefault': True, 'title': 'default'}}
    >>> wmts['MODIS_Aqua_Cloud_Top_Temp_Night'].formats
    ['image/png']
    >>> wmts['MODIS_Aqua_Cloud_Top_Temp_Night'].tilematrixsets
    ['EPSG4326_2km']

    >>> wmts['MODIS_Aqua_Water_Vapor_5km_Night'].title
    'MODIS_Aqua_Water_Vapor_5km_Night'

Expect a KeyError for invalid names

    >>> wmts['utterly bogus'].title
    Traceback (most recent call last):
    ...
    KeyError: 'No content named utterly bogus'

Test operations

    >>> [op.name for op in wmts.operations]
    ['GetCapabilities', 'GetTile']
    
    >>> wmts.getOperationByName('GetTile').methods
    {'Get': {'url': 'http://map1b.vis.earthdata.nasa.gov/wmts-geo/wmts.cgi?', 'encodings': ['KVP']}}

Test the gettile methods

    # TODO - more checks
    >>> wmts.buildTileRequest(layer='MODIS_Aqua_SurfaceReflectance_Bands121', tilematrix='0', row=0, column=0)
    'SERVICE=WMTS&REQUEST=GetTile&VERSION=1.0.0&LAYER=MODIS_Aqua_SurfaceReflectance_Bands121&STYLE=default&TILEMATRIXSET=EPSG4326_250m&TILEMATRIX=0&TILEROW=0&TILECOL=0&FORMAT=image%2Fjpeg'
    >>> from PIL import Image
    >>> import cStringIO
    >>> tile000 = wmts.gettile(layer='MODIS_Aqua_SurfaceReflectance_Bands121', tilematrix='0', row=0, column=0)
    >>> im = cStringIO.StringIO(tile000.read())
    >>> image = Image.open(im)
    >>> image.size
    (512, 512)
