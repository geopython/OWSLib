
Imports

    >>> from owslib.wmts import WebMapTileService
    
Fake a request to a WMTS Server using saved doc

    >>> xml = open('erdas-iws-wmts-cap.xml', 'r').read() 
    >>> wmts = WebMapTileService('url', version='1.0.0', xml=xml)
    
Test capabilities
-----------------
    >>> wmts.identification.type
    'OGC WMTS'
    >>> wmts.identification.version
    '1.0.0'
    >>> wmts.identification.title
    'Image Web Server WMTS sample'
    >>> str.strip(wmts.identification.abstract)
    'Image Web Server WMTS Sample services'
    >>> wmts.identification.keywords
    ['WMTS', 'OTDF', 'Tile serving']
    >>> wmts.identification.accessconstraints
    'none'
    >>> wmts.identification.fees
    'none'

Service Provider:

    >>> wmts.provider.name
    'IWS Sample Server'

    >>> wmts.provider.url
    'http://iws2.erdas.com'
    
Check contact info
    >>> wmts.provider.contact.name
    'Chris Tweedie'
    >>> wmts.provider.contact.position
    'Apollo IWS Product Manager'

    # TODO: check if address can be duplicated
    >>> wmts.provider.contact.address
    'Norcross, GA 30092-2500 USA'
    >>> wmts.provider.contact.region
    'GA'
    >>> wmts.provider.contact.email
    'info@erdas.com'
    >>> wmts.provider.contact.city
    'Norcross'
    >>> wmts.provider.contact.postcode
    '30092-2500'
    >>> wmts.provider.contact.country
    'USA'
    >>> wmts.provider.contact.phone
    '+1 770 776 3400'
    >>> wmts.provider.contact.fax
    '+1 770 776 3500'

Test available content layers

    >>> list(wmts.contents)
    ['franklin.ecw', 'images_edinburgh_edinburgh.ecw', 'landsat742.ecw', 'images_charlestoncosids-mosaic.ecw']

Test TileMatrixSet variants
    # TODO: check individual values
    >>> wmts.tilematrixsets.keys()
    ['ogc:1.0:googlemapscompatible', 'epsg:27700:images_edinburgh_edinburgh.ecw', 'ogc:1.0:globalcrs84scale', 'ogc:1.0:globalcrs84pixel', 'ogc:1.0:googlecrs84quad']
    >>> wmts.tilematrixsets['ogc:1.0:googlemapscompatible'].identifier
    'ogc:1.0:googlemapscompatible'
    >>> wmts.tilematrixsets['ogc:1.0:googlemapscompatible'].crs
    'urn:ogc:def:crs:EPSG:6.18:3:3857'
    >>> sorted(wmts.tilematrixsets['ogc:1.0:googlemapscompatible'].tilematrix.keys())
    ['0', '1', '10', '11', '12', '13', '14', '15', '16', '17', '18', '2', '3', '4', '5', '6', '7', '8', '9']
    >>> wmts.tilematrixsets['ogc:1.0:googlemapscompatible'].tilematrix['0'].identifier
    '0'
    >>> wmts.tilematrixsets['ogc:1.0:googlemapscompatible'].tilematrix['0'].scaledenominator
    559082264.0287178
    >>> wmts.tilematrixsets['ogc:1.0:googlemapscompatible'].tilematrix['0'].topleftcorner
    (20037508.34279, -20037508.34279)
    >>> wmts.tilematrixsets['ogc:1.0:googlemapscompatible'].tilematrix['0'].tilewidth
    256
    >>> wmts.tilematrixsets['ogc:1.0:googlemapscompatible'].tilematrix['0'].tileheight
    256
    >>> wmts.tilematrixsets['ogc:1.0:googlemapscompatible'].tilematrix['0'].matrixwidth
    1
    >>> wmts.tilematrixsets['ogc:1.0:googlemapscompatible'].tilematrix['0'].matrixheight
    1
    >>> wmts.tilematrixsets['ogc:1.0:googlemapscompatible'].tilematrix['5'].identifier
    '5'
    >>> wmts.tilematrixsets['ogc:1.0:googlemapscompatible'].tilematrix['5'].scaledenominator
    17471320.75089743
    >>> wmts.tilematrixsets['ogc:1.0:googlemapscompatible'].tilematrix['5'].topleftcorner
    (20037508.34279, -20037508.34279)
    >>> wmts.tilematrixsets['ogc:1.0:googlemapscompatible'].tilematrix['5'].tilewidth
    256
    >>> wmts.tilematrixsets['ogc:1.0:googlemapscompatible'].tilematrix['5'].tileheight
    256
    >>> wmts.tilematrixsets['ogc:1.0:googlemapscompatible'].tilematrix['5'].matrixwidth
    32
    >>> wmts.tilematrixsets['ogc:1.0:googlemapscompatible'].tilematrix['5'].matrixheight
    32
    >>> wmts.tilematrixsets['ogc:1.0:googlecrs84quad'].identifier
    'ogc:1.0:googlecrs84quad'
    >>> wmts.tilematrixsets['ogc:1.0:googlecrs84quad'].crs
    'urn:ogc:def:crs:OGC:1.3:CRS84'
    >>> sorted(wmts.tilematrixsets['ogc:1.0:googlecrs84quad'].tilematrix.keys())
    ['0', '1', '10', '11', '12', '13', '14', '15', '16', '17', '18', '2', '3', '4', '5', '6', '7', '8', '9']
    >>> wmts.tilematrixsets['ogc:1.0:googlecrs84quad'].tilematrix['0'].identifier
    '0'
    >>> wmts.tilematrixsets['ogc:1.0:googlecrs84quad'].tilematrix['0'].topleftcorner
    (-180.0, 180.0)
    >>> wmts.tilematrixsets['ogc:1.0:googlecrs84quad'].tilematrix['0'].tilewidth
    256
    >>> wmts.tilematrixsets['ogc:1.0:googlecrs84quad'].tilematrix['0'].tileheight
    256
    >>> wmts.tilematrixsets['ogc:1.0:googlecrs84quad'].tilematrix['0'].matrixwidth
    1
    >>> wmts.tilematrixsets['ogc:1.0:googlecrs84quad'].tilematrix['0'].matrixheight
    1
    >>> wmts.tilematrixsets['ogc:1.0:googlecrs84quad'].tilematrix['8'].identifier
    '8'
    >>> wmts.tilematrixsets['ogc:1.0:googlecrs84quad'].tilematrix['8'].scaledenominator
    2183915.093862179
    >>> wmts.tilematrixsets['ogc:1.0:googlecrs84quad'].tilematrix['8'].topleftcorner
    (-180.0, 90.0)
    >>> wmts.tilematrixsets['ogc:1.0:googlecrs84quad'].tilematrix['8'].tilewidth
    256
    >>> wmts.tilematrixsets['ogc:1.0:googlecrs84quad'].tilematrix['8'].tileheight
    256
    >>> wmts.tilematrixsets['ogc:1.0:googlecrs84quad'].tilematrix['8'].matrixwidth
    256
    >>> wmts.tilematrixsets['ogc:1.0:googlecrs84quad'].tilematrix['8'].matrixheight
    256

Test single item accessor

    >>> wmts['franklin.ecw'].id
    'franklin.ecw'
    >>> wmts['franklin.ecw'].title
    'Franklin.ecw'

    # check something in the middle
    >>> wmts['images_edinburgh_edinburgh.ecw'].title
    'edinburgh'
    >>> wmts['images_edinburgh_edinburgh.ecw'].boundingBoxWGS84
    (-3.46487098205, 55.812000561767, -3.065037540918, 56.008328589172)
    >>> wmts['images_edinburgh_edinburgh.ecw'].id
    'images_edinburgh_edinburgh.ecw'
    >>> wmts['images_edinburgh_edinburgh.ecw'].styles
    {'default': {'isDefault': True}}
    >>> wmts['images_edinburgh_edinburgh.ecw'].formats
    ['image/png', 'image/jpeg']
    >>> wmts['images_edinburgh_edinburgh.ecw'].tilematrixsets
    ['epsg:27700:images_edinburgh_edinburgh.ecw', 'ogc:1.0:globalcrs84pixel', 'ogc:1.0:globalcrs84scale', 'ogc:1.0:googlecrs84quad', 'ogc:1.0:googlemapscompatible']

    >>> wmts['images_charlestoncosids-mosaic.ecw'].id
    'images_charlestoncosids-mosaic.ecw'
    >>> wmts['images_charlestoncosids-mosaic.ecw'].title
    'CharlestonCoSIDS-mosaic'

Expect a KeyError for invalid names

    >>> wmts['utterly bogus'].title
    Traceback (most recent call last):
    ...
    KeyError: 'No content named utterly bogus'

Test operations

    >>> [op.name for op in wmts.operations]
    ['GetCapabilities', 'GetTile']
    
    >>> wmts.getOperationByName('GetTile').methods
    {'Get': {'url': 'http://iws2.erdas.com/ImageX/ecw_wmts.dll?', 'encodings': ['KVP']}}

Test the gettile methods

    # TODO - more checks
    >>> wmts.buildTileRequest(layer='franklin.ecw', tilematrix='0', row=0, column=0)
    'SERVICE=WMTS&REQUEST=GetTile&VERSION=1.0.0&LAYER=franklin.ecw&STYLE=default&TILEMATRIXSET=ogc%3A1.0%3Aglobalcrs84pixel&TILEMATRIX=0&TILEROW=0&TILECOL=0&FORMAT=image%2Fpng'
    >>> from PIL import Image
    >>> import cStringIO
    >>> tile000 = wmts.gettile(layer='franklin.ecw', tilematrix='0', row=0, column=0)
    >>> im = cStringIO.StringIO(tile000.read())
    >>> image = Image.open(im)
    >>> image.size
    (256, 256)
