Imports

    >>> from __future__ import (absolute_import, division, print_function)
    >>> from tests.utils import cast_tuple_int_list, cast_tuple_int_list_srs, resource_file
    >>> from owslib.wms import WebMapService
    
Fake a request to a WMS Server using saved doc from the National Atlas for
the 1 Million Scale datasets.
http://webservices.nationalatlas.gov/wms/1million?SERVICE=WMS&REQUEST=GetCapabilities

    >>> xml = open(resource_file('wms_nationalatlas_getcapabilities_130.xml'), 'r').read() 
    >>> wms = WebMapService('url', version='1.3.0', xml=xml)
    
Test capabilities

    >>> wms.identification.type
    'WMS'

    >>> wms.identification.title
    '1 Million Scale WMS Layers from the National Atlas of the United States'

    >>> wms.identification.abstract
    'Test Data for 1 Million Scale'
    
    >>> wms.provider.url
    'http://webservices.nationalatlas.gov/wms?'
    
    >>> wms.identification.keywords
    ['United States', 'National Atlas']

    >>> p = wms.provider.contact
    >>> p.name
    >>> p.email

    >>> p.position
    'WMS Support Staff'

Test available content layers

    >>> 'treecanopy' in wms.contents.keys()
    True
    
    >>> layers=[wms[layer].title for layer in wms.contents]
    >>> '1 Million Scale - Airports' in layers
    True
        
Test single item accessor

    >>> wms['treecanopy'].title
    '1 Million Scale - Tree Canopy 100 Meter Resolution'
    
    >>> cast_tuple_int_list_srs(wms['treecanopy'].boundingBox)
    [-179, 17, -62, 71, 'CRS:84']
    
    >>> cast_tuple_int_list(wms['treecanopy'].boundingBoxWGS84)
    [-179, 17, -62, 71]
    
    >>> wms['treecanopy'].crsOptions
    ['EPSG:4326', 'EPSG:4269', 'EPSG:3785', 'EPSG:4267', 'EPSG:900913', 'EPSG:54008', 'EPSG:102100', 'CRS:84', 'EPSG:54004', 'EPSG:102113', 'EPSG:2163', 'EPSG:3857']

    >>> 'EPSG:3857' in wms['treecanopy'].crsOptions
    True

    >>> x = wms['one_million'].attribution
    >>> x == {'url': 'http://svn.codehaus.org/geoserver/trunk/data/release/data/', 'logo_size': (353, 112), 'logo_url': 'http://geoserver.org/s/1518/25/0.1/_/download/resources/com.atlassian.confluence.themes.geoserver%3Ageoserver/chrome/geoserver-logo.png', 'title': 'GeoServer Sample Data'}
    False

    >>> x['url'] == 'http://nationalatlas.gov/infodocs/wms_intro.html'
    True

    >>> x = wms['treecanopy'].styles
    >>> x == {'treei0100a': {'legend': 'http://nationalatlas.gov/images/treei0100a.gif', 'title': 'treei0100a'}}
    True

Test the Dimensions
    
    >>> wms['coast1m'].timepositions
    ['1995-01-01/2013-12-31/PT5M']

    >>> '480' in wms['coast1m'].elevations
    True

Test the metadata link
    >>> len(wms['coast1m'].metadataUrls) > 0
    True

    >>> wms['coast1m'].metadataUrls[0]['format']
    'text/xml'

    >>> wms['coast1m'].metadataUrls[0]['url']
    '9250AA67-F3AC-6C12-0CB9-0662231AA181_fgdc.xml'
    
Expect a KeyError for invalid names

    >>> wms['utterly bogus'].title
    Traceback (most recent call last):
    ...
    KeyError: 'No content named utterly bogus'

Test operations

    >>> [op.name for op in wms.operations]
    ['GetCapabilities', 'GetMap', 'GetFeatureInfo', 'DescribeLayer', 'GetLegendGraphic', 'GetStyles']
    
    >>> x = wms.getOperationByName('GetMap').methods[0]
    >>> x == {'type': 'Get', 'url': 'http://webservices.nationalatlas.gov/wms?'}
    True
    
    >>> wms.getOperationByName('GetMap').formatOptions
    ['image/png', 'image/jpeg', 'image/gif', 'image/png; mode=8bit', 'image/tiff']

Test exceptions

    >>> wms.exceptions
    ['application/vnd.ogc.se_xml', 'application/vnd.ogc.se_inimage']

Lastly, test the getcapabilities method

#    >>> wms = WebMapService('http://wms.telascience.org/cgi-bin/ngBM_wms?', version='1.1.1')
#    >>> xml = wms.getcapabilities().read()
#    >>> xml.find('<WMT_MS_Capabilities version="1.1.1">') > 0
#    True

