
Imports and initialize

    >>> from owslib.wfs import WebFeatureService
    >>> wfs = WebFeatureService('http://giswebservices.massgis.state.ma.us/geoserver/wfs', version='1.1.0')

Test the capabilities info

    >>> wfs.identification.service
    'WFS'
    >>> wfs.identification.version
    '1.1.0'
    >>> wfs.identification.title
    >>> wfs.identification.abstract
    >>> #wfs.identification.keywords -- this results in a ridicously long response
    #['Grid', 'Climate', 'CSML']
    >>> wfs.identification.fees
    >>> wfs.identification.accessconstraints
    >>> wfs.provider.name
    'MassGIS - Information Technology Division'
    >>> wfs.provider.url
    >>> wfs.provider.contact.email
    >>> wfs.provider.contact.name
    'Aleda Freeman'
    >>> wfs.provider.contact.organization
    >>> wfs.provider.contact.city
    'Boston'
    >>> wfs.provider.contact.region
    'MA'
    >>> wfs.provider.contact.postcode
    '02114'
    >>> wfs.provider.contact.country
    'USA'
	
    >>> i=0
    >>> for layer in wfs.contents:
    ...   wfs[layer].title
    ...   i+=1
    ...   if i > 5:
    ...     break
    'Carcinus maenas 2010 Points (Green Carcinus Crab)'
    'Boston Harbor Multibeam Bathymetry Survey Bounds'
    'GeoServer Test Pt SV'
    'Shellfish Landings MA 1990-2001'
    'Lobster Harvest Zones 1997 Arcs'
    'DAR.FIELDS_PONDS_ORG8'
	
    >>> wfs['doesnotexist']
    Traceback (most recent call last):
    ...
    KeyError: 'No content named doesnotexist'
    >>> catch=wfs.getcapabilities()
    >>> catch=wfs.items()
    >>> catch=wfs.getfeature(typename=['GISDATA.UTMGRID_POLY'])
    
Test the getfeature method

    >>> #wfs.contents.keys() -- this results in a ridicously long response

    TODO: Test GetFeature method

    # getfeature results in error since there are no methods for this wfs...
    >>> #response = wfs.getfeature(typename=['csml:GridSeriesFeature'], maxfeatures=2)
    >>> #response=wfs.getfeature(typename=['csml:GridSeriesFeature'],bbox=(-5,50,-4,60))

Test Stored Queries
    >>> storedqid='urn-x:wfs:StoredQueryId:badc.nerc.ac.uk:extractGridSeriesFromGridSeries'
    >>> sqparams={'featureid':'air_temperature','mintime':'2799-06-01T00:00:00.0','maxtime':'2803-06-01T00:00:00.0','bbox':'-180,-90,180,90'}

	# TODO: see what features are available from request and revisit the getfeature code, pretty much all of below relies on this
    
    >>> #response=wfs.getfeature(typename=['csml:GridSeriesFeature'],storedQueryID=storedqid, storedQueryParams=sqparams)
    >>> #for sq in wfs.storedqueries: print sq.id
    urn-x:wfs:StoredQueryId:badc.nerc.ac.uk:extractPointSeriesFromGridSeries
    urn-x:wfs:StoredQueryId:badc.nerc.ac.uk:phenomenonQuery
    urn-x:wfs:StoredQueryId:badc.nerc.ac.uk:extractGridSeriesFromGridSeries
    queryOne
    urn-x:wfs:StoredQueryId:badc.nerc.ac.uk:extractPointFromPointSeries
    urn-x:wfs:StoredQueryId:ISO:GetFeatureById
    urn-x:wfs:StoredQueryId:badc.nerc.ac.uk:extractPointSeriesFromPointSeries
    >>> # sq in wfs.storedqueries: print sq.title
    ExtractPointSeriesFromGridSeries
    SelectFeaturesByPhenomenon
    ExtractGridSeriesFromGridSeries
    test query
    ExtractPointFromPointSeries
    GetFeatureById
    ExtractPointSeriesFromPointSeries
    >>> #for sq in wfs.storedqueries: print sq.returnfeaturetype
    csml:PointSeriesFeature
    csml:AbstractFeature
    csml:GridSeriesFeature
    xyzml:SomeFeatureType
    csml:PointFeature
    csml:AbstractFeature
    csml:PointSeriesFeature
    >>> #for sq in wfs.storedqueries: print sq.abstract
    Extract a csml:PointSeries from a csml:GridSeriesFeature
    Select features based on their phenomenon type, e.g. "temperature"
    Extract a csml:GridSeries from a csml:GridSeriesFeature
    my test query
    Extract a csml:PointFeature for a single time instance from a csml:PointSeriesFeature
    Get any feature by id
    Extract a csml:PointSeriesFeature for a range of times from a csml:PointSeriesFeature
    >>> #sq = wfs.storedqueries[2]
    >>> #for param in sq.parameters: print "%s,  %s"%(param.name, param.type)
    featureid,  xsd:anyURI
    mintime,  gml:TimePositionUnion
    maxtime,  gml:TimePositionUnion
    bbox,  xsd:string
