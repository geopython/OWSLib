
Imports

    >>> from tests.utils import cast_tuple_int_list, resource_file
    >>> from owslib.wfs import WebFeatureService

Fake a request to a WFS Server using saved doc from.

    >>> xml = open(resource_file('mapserver-wfs-cap.xml'), 'r').read()
    >>> wfs = WebFeatureService('url', version='1.0', xml=xml)

Test capabilities

Service Identification:

    >>> wfs.identification.type
    'MapServer WFS'

    >>> wfs.identification.version
    '1.0'

    >>> wfs.identification.title
    'Bird Studies Canada WMS/WFS Server'

    >>> wfs.identification.abstract
    'Bird Studies Canada WMS/WFS Server for bird distribution and abundance data, and related information.  Bird Studies Canada gratefully acknowledges the support of Environment Canada - Canadian Information System for the Environment in developing this service.'

    >>> wfs.identification.keywords
    ['\n    birds\n    distribution\n    abundance\n    conservation\n    sites\n    monitoring\n    populations\n    canada\n  ']

    >>> wfs.identification.accessconstraints
    'None'

    >>> wfs.identification.fees
    'None'

Service Provider:

    >>> wfs.provider.name
    'MapServer WFS'

    >>> wfs.provider.url
    'http://geodiscover.cgdi.ca/gdp/search?action=entrySummary&entryType=webService&entryId=3920&entryLang=en&portal=gdp'

    # TODO: test contact info:
    #>>> wfs.provider.contact.name


Test available content layers

    >>> sorted(wfs.contents.keys())
    ['BBS_PT', 'CBC_PT', 'CBC_PY', 'CLLS', 'IBA', 'MMP', 'OBBA_BLOCK', 'OBBA_REGION', 'OBBA_SQUARE', 'OWLS']

    >>> sorted([wfs[layer].title for layer in wfs.contents])
    ['Breeding Bird Survey Route Start Points', 'Canadian Christmas Bird Count Locations', 'Canadian Christmas Bird Count Locations', 'Canadian Important Bird Areas', 'Canadian Lakes Loon Survey Locations', 'Marsh Monitoring Program Route Locations', 'Nocturnal Owl Survey Locations', 'Ontario Breeding Bird Atlas 10 km Squares', 'Ontario Breeding Bird Atlas 100 km Blocks', 'Ontario Breeding Bird Atlas Administrative Regions']

Test single item accessor

    >>> wfs['IBA'].title
    'Canadian Important Bird Areas'

    >>> wfs['IBA'].boundingBox

    >>> cast_tuple_int_list(wfs['IBA'].boundingBoxWGS84)
    [-141, 41, -52, 78]

    >>> [x.getcode() for x in wfs['IBA'].crsOptions]
    ['EPSG:4326']

    >>> wfs['IBA'].verbOptions
    ['{http://www.opengis.net/wfs}Query']

Expect a KeyError for invalid names

    >>> wfs['utterly bogus'].title
    Traceback (most recent call last):
    ...
    KeyError: 'No content named utterly bogus'

Test operations

    >>> sorted([op.name for op in wfs.operations])
    ['{http://www.opengis.net/wfs}DescribeFeatureType', '{http://www.opengis.net/wfs}GetCapabilities', '{http://www.opengis.net/wfs}GetFeature']

    >>> x = wfs.getOperationByName('{http://www.opengis.net/wfs}GetFeature').methods
    >>> x == {'{http://www.opengis.net/wfs}Get': {'url': 'http://www.bsc-eoc.org/cgi-bin/bsc_ows.asp?'}, '{http://www.opengis.net/wfs}Post': {'url': 'http://www.bsc-eoc.org/cgi-bin/bsc_ows.asp?'}}
    True

    >>> sorted(wfs.getOperationByName('{http://www.opengis.net/wfs}GetFeature').formatOptions)
    ['{http://www.opengis.net/wfs}GML2', '{http://www.opengis.net/wfs}GML3']


Test exceptions

    >>> wfs.exceptions
    []

Lastly, test the getcapabilities method

    >>> wfs = WebFeatureService('http://www.bsc-eoc.org/cgi-bin/bsc_ows.asp?', version='1.0')
    >>> xml = wfs.getcapabilities().read()
    >>> xml.find('<WFS_Capabilities') > 0
    True
