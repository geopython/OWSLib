# SOS version 2.0 tests using the 52North 'Geoviqua' service

# Imports
>>> from owslib.sos import SensorObservationService
>>> from owslib.swe.observation.sos200 import SOSGetObservationResponse
>>> from owslib.etree import etree

# Setup
#>>> service = SensorObservationService('http://geoviqua.dev.52north.org/SOS-Q/sos/kvp',version='2.0.0')
>>> service = SensorObservationService('http://ioossos.axiomalaska.com/52n-sos-ioos-stable/sos/kvp',version='2.0.0')

# http://ioossos.axiomalaska.com/52n-sos-ioos-stable/sos/kvp?service=SOS&request=GetObservation&namespaces=xmlns(om%2Chttp%3A%2F%2Fwww.opengis.net%2Fom%2F2.0)&temporalFilter=om%3AphenomenonTime%2Clatest&version=2.0.0

# Check allowed params for get observation
>>> get_obs=service.get_operation_by_name('GetObservation')

>>> response = service.get_observation(responseFormat='http://www.opengis.net/om/2.0', offerings=['urn:ioos:station:test:8'], observedProperties=['http://mmisw.org/ont/cf/parameter/sea_water_temperature'])

>>> xml_tree = etree.fromstring(response)

>>> parsed_response = SOSGetObservationResponse(xml_tree)

>>> type(parsed_response)
<class 'owslib.swe.observation.sos200.SOSGetObservationResponse'>

# This O&M structure of the results splits each point into an O&M object, resulting in 400 results
>>> len(parsed_response.observations)
400

# Get observation for a specific offering (in this case corresponds to a station) and observed property (sea water temperature)
>>> response = service.get_observation(responseFormat='http://www.opengis.net/waterml/2.0', offerings=['urn:ioos:station:test:8'], observedProperties=['http://mmisw.org/ont/cf/parameter/sea_water_temperature'])
>>> xml_tree = etree.fromstring(response)
>>> parsed_response = SOSGetObservationResponse(xml_tree)
>>> type(parsed_response)
<class 'owslib.swe.observation.sos200.SOSGetObservationResponse'>

# The WaterML2.0 response creates an observation for logical groups of feature/observedProp/proc, with the om:result containing a time-series of results. 
# This results in 20 OM_Observation objects, each with a time-series of 20 points
>>> len(parsed_response.observations)
20
>>> type(parsed_response.observations[0])
<class 'owslib.swe.observation.observation.OM_Observation'>
>>> type(parsed_response.observations[0].result)
<class 'owslib.swe.observation.observation.MeasurementTimeseries'>

>>> measurement_timeseries = parsed_response.observations[0].result
>>> len(measurement_timeseries.points)
20


>>> response = service.get_observation(responseFormat='http://www.opengis.net/waterml-dr/2.0', offerings=['urn:ioos:station:test:8'], observedProperties=['http://mmisw.org/ont/cf/parameter/sea_water_temperature'])
